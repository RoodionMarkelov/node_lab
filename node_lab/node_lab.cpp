// node_lab.cpp: определяет точку входа для приложения.
//

#include "node_lab.h"

using namespace std;

int main()
{
	SingleLinkedList<int> l1(3, -10, 10);
	SingleLinkedList<float> l2(3, -10.0f, 10.0f);
	SingleLinkedList<double> l3(3, -10.0, 10.0);
	//cout << l1 << endl;
	//cout << l2 << endl;
	//cout << l3 << endl;
	cout << "--------------------------------" << endl;
	cout << "push_head(val)" << endl;
	SingleLinkedList<int> l11;
	l11.push_head(10, 4);
	l11.push_head(2, 5);
	l11.push_head(-10, 6);
	cout << l11 << " size: " << l11.get_size() << endl;
	SingleLinkedList<float> l22;
	l22.push_head(10.0f, 4);
	l22.push_head(0.0f, 5);
	l22.push_head(-10.0f, 6);
	
	cout << l22 << " size: " << l22.get_size() << endl;
	SingleLinkedList<double> l33;
	l33.push_head(10.0, 8);
	l33.push_head(1.0, 7);
	l33.push_head(-10.0, 9);
	cout << l33 << " size: " << l33.get_size() << endl;
	cout << "--------------------------------" << endl;
	cout << "push_head(list)" << endl;
	cout << "list1" << endl;
	l1.print();
	cout << "list11" << endl;
	l11.print();
	l1.push_head(l11);
	cout << "list1.push_head(l11)" << endl;
	l1.print();
	cout << l1 << " size: " << l1.get_size() << endl;
	cout  << endl;
	cout << "list2" << endl;
	l2.print();
	cout << "list22" << endl;
	l22.print();
	l2.push_head(l22);
	cout << "list2.push_head(list22)" << endl;
	l2.print();
	cout << l2 << " size: " << l2.get_size() << endl;
	cout << endl;
	cout << "list3" << endl;
	l3.print();
	cout << "list33" << endl;
	l33.print();
	l3.push_head(l33);
	cout << "list3.push_head(l33)" << endl;
	l3.print();
	cout << l3 << " size: " << l3.get_size() << endl;
	/*cout << "--------------------------------" << endl;
	cout << "push_tail(val)" << endl;
	SingleLinkedList<int> l111;
	l111.push_tail(10, 0);
	l111.push_tail(0,1);
	l111.push_tail(-10, 2);
	cout << l111 << " size: " << l111.get_size() << endl;
	SingleLinkedList<float> l222;
	l222.push_tail(10.0f, 3);
	l222.push_tail(0.0f, 10);
	l222.push_tail(-10.0f, 5);
	cout << l222 << " size: " << l222.get_size() << endl;
	SingleLinkedList<double> l333;
	l333.push_tail(10.0, 3);
	l333.push_tail(0.0, 2);
	l333.push_tail(-10.0, 1);
	cout << l333 << " size: " << l333.get_size() << endl;
	cout << "--------------------------------" << endl;
	cout << "push_tail(list)" << endl;
	l1.push_tail(l111);
	cout << l1 << " size: " << l1.get_size() << endl;
	l2.push_tail(l222);
	cout << l2 << " size: " << l2.get_size() << endl;
	l3.push_tail(l333);
	cout << l3 << " size: " << l3.get_size() << endl;
	cout << "--------------------------------" << endl;
	cout << "pop_head() and pop_tail()" << endl;
	l1.pop_head();
	l1.pop_tail();
	cout << l1 << " size: " << l1.get_size() << endl;
	l2.pop_head();
	l2.pop_tail();
	cout << l2 << " size: " << l2.get_size() << endl;
	l3.pop_head();
	l3.pop_tail();
	cout << l3 << " size: " << l3.get_size() << endl;
	cout << "--------------------------------" << endl;
	cout << "delete_node" << endl;
	cout << l1 << " size: " << l1.get_size() << endl;
	l1.delete_node(-10);
	l1.delete_node(100);
	cout << l1 << " size: " << l1.get_size() << endl;
	cout << l2 << " size: " << l2.get_size() << endl;
	l2.delete_node(10.0f);
	l2.delete_node(100.0f);
	cout << l2 << " size: " << l2.get_size() << endl;
	cout << l3 << " size: " << l3.get_size() << endl;
	l3.delete_node(-10.0);
	l3.delete_node(100.0);
	cout << l3 << " size: " << l3.get_size() << endl;
	cout << "--------------------------------" << endl;
	cout << "calculate_value" << endl;
	SingleLinkedList<int> list_int;
	list_int.push_head(10, 0);
	list_int.push_head(5, 1);
	list_int.push_head(-10, 3);
	cout << list_int << " size: " << list_int.get_size() << " x = 2 Calculate value shold be -60 = " << calculate_value(list_int, 2) << endl;
	SingleLinkedList<float> list_float;
	list_float.push_head(10.0f, 0);
	list_float.push_head(-5.5f, 1);
	list_float.push_head(-3.7f, 2);
	cout << list_float << " size: " << list_float.get_size() << "x = 2 Calculate value should be -15,8 and = " << calculate_value(list_float, 2.0f) << endl;
	SingleLinkedList<double> list_double;
	list_double.push_head(0.7, 0);
	list_double.push_head(2.5, 1);
	list_double.push_head(5.5,2);
	cout << list_double << " size: " << list_double.get_size() << "x = 2 Calculate value should be 27.7 and = " << calculate_value(list_double, 2.0) << endl;
	*/
	return 0;
}
